@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IJSRuntime Js

<div class="file-input-item w-full" id="@InputName">
    @for (var i = 1; i <= MaxFiles; i++){
        <CustomLabel IsVisible="@(_current == i)" OnChange="UploadFile" InputName="@InputName" MaxFiles="@MaxFiles" UploadedFiles="UploadedFiles" 
                     id="@($"{InputName}-{i}")">
            @ChildContent
            <p class="text-inherit">File limit: @MaxFiles</p>
        </CustomLabel>
    }
    @if (_current > MaxFiles){
        <div class="min-w-64 py-10 px-6 w-full drop-zone">
            <span class="flex flex-col items-center text-gray-500">
                <p class="text-inherit">File limit reached.</p>
            </span>
        </div>
    }
    <div class="mt-1 flex flex-col flex-wrap bg-transparent preview-container">
        @foreach (var filePair in UploadedFiles){
            <FileInputPreview FileName="@filePair.Value.Name" OnClose="() => RemoveFile(filePair.Key)"/>
        }
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter] public string InputName{ get; set; } = string.Empty;
    [Parameter] public int MaxFiles{ get; init; } = 1;

    private int _current = 1;

    private IJSObjectReference? _module;
    public Dictionary<int, IBrowserFile> UploadedFiles{ get; private set; } = [];

    private async Task UploadFile(InputFileChangeEventArgs e){
        if (e.FileCount != 0 && UploadedFiles.Count < MaxFiles && _current <= MaxFiles){
            foreach (var file in e.GetMultipleFiles()){
                UploadedFiles.Add(_current, file);
                // set current to the next available index
                _current = FindNext();
            }

            StateHasChanged();
        }
    }

    private int FindNext(){
        var i = 1;
        for (;i <= MaxFiles && UploadedFiles.ContainsKey(i); i++);
        return i;
    }

    public void RemoveFile(int index){
        UploadedFiles.Remove(index);
        _current = index;
        StateHasChanged();
    }

    public void ClearFiles(){
        UploadedFiles.Clear();
        _current = 1;
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender){
            _module = await Js.InvokeAsync<IJSObjectReference>("import",
                "./Components/Upload/DropFileInput.razor.js");

            await _module.InvokeVoidAsync("initComponent", $"#{InputName}");
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync(){
        if (_module is not null){
            try{
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException){
            }
        }
    }
}