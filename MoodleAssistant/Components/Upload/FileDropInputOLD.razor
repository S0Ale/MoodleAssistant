@rendermode InteractiveServer
@using MoodleAssistant.Services
@implements IAsyncDisposable
@inject IJSRuntime Js
@inject ReplicatorState ReplicatorState;

<div class="file-input-item" id="@InputAttributes["id"]">
    <label class="drop-zone flex justify-center w-full border border-zinc-400 bg-gray-100 border-dashed rounded appearance-none cursor-pointer h-32 px-10 hover:border-zinc-500 focus:outline-none">
        <span class="flex items-center text-gray-500">
            Drop XML file here, or<span class="text-blue-500 underline ml-[4px]">browse</span>
        </span>
        <InputFile class="hidden" @attributes="@InputAttributes" id="" OnChange="UploadFile"></InputFile>
    </label>
    <div class="preview-container"></div>
</div>

@code {
    //[Parameter]
    //public string FileType { get; set; } 
    private IJSObjectReference? _module;
    [Parameter(CaptureUnmatchedValues = true)]
    public required Dictionary<string, object> InputAttributes { get; set; }
    
    private void UploadFile(InputFileChangeEventArgs e){
        if (e.FileCount == 0){
            ReplicatorState.MainFiles.Remove(InputAttributes["id"] as string ?? throw new InvalidOperationException());
        } else ReplicatorState.MainFiles[InputAttributes["id"] as string ?? string.Empty] = e.GetMultipleFiles()[0];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import",
                "./Components/Upload/FileDropInput.razor.js");

            await _module.InvokeVoidAsync("initComponent", InputAttributes["id"]);
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}