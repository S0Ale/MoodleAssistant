@using MoodleAssistant.Services;
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime Js
@inject ReplicatorState ReplicatorState;

<div class="flex flex-col justify-center">
    <span class="p-3 code text-center">@ParamValue</span>
    <div class="p-3">
        <div class="file-input-item border-0 @($"{ParamName}-item")">
            <label class="drop-zone flex justify-center w-full border border-zinc-400 bg-gray-100 border-dashed rounded appearance-none cursor-pointer h-32 px-10 hover:border-zinc-500 focus:outline-none">
                <span class="flex items-center text-gray-500">
                    Drop file here, or<span class="text-blue-500 underline ml-[4px]">browse</span>
                </span>
                <InputFile class="snd-file-input hidden" @attributes="@InputAttributes" OnChange="UploadFile" multiple></InputFile>
            </label>
            <div class="preview-container"></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ParamName { get; set; }
    [Parameter]
    public string ParamValue { get; set; }
    [Parameter]
    public string FormId { get; set; }
    
    private string _id = string.Empty;

    protected override void OnInitialized(){
        _id = $"{ParamName}-item";
    }

    private IJSObjectReference? _module;
    [Parameter(CaptureUnmatchedValues = true)]
    public required Dictionary<string, object> InputAttributes { get; set; }
    
    private void UploadFile(InputFileChangeEventArgs e){
        if (e.FileCount == 0){
            ReplicatorState.ParamFiles.Remove(_id);
        } else ReplicatorState.ParamFiles[ParamName] = e.GetMultipleFiles().ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender)
        {
            _module = await Js.InvokeAsync<IJSObjectReference>("import",
                "./Components/Upload/FileDropInputMultiple.razor.js");

            await _module.InvokeVoidAsync("initComponent", FormId, _id);
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}