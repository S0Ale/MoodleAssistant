@implements IAsyncDisposable
@rendermode InteractiveServer
@inject IJSRuntime Js

<div class="file-input-item w-full" id="@InputName">
    <label class="min-w-64 py-10 px-6 w-full drop-zone">
        <span class="flex flex-col items-center text-gray-500">
            @if (UploadedFiles.Count < MaxFiles){
                <p class="text-inherit">Drop XML file here, or <span class="text-blue-500 underline ml-[4px]">browse</span>.</p>
                <p class="text-inherit">File limit: @MaxFiles</p>
            } else{
                <p class="text-inherit">File limit reached.</p>
            }
        </span>
        <InputFile class="hidden" @attributes="@InputAttributes" OnChange="UploadFile" multiple/>
    </label>
    <div class="mt-1 flex flex-col flex-wrap bg-transparent preview-container">
        @foreach (var file in UploadedFiles)
        {
            <FileInputPreview FileName="@file.Name" OnClose="RemoveFile" />
        }
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public required Dictionary<string, object> InputAttributes { get; set; }
    [Parameter] 
    public string InputName{ get; set; } = string.Empty;
    [Parameter]
    public int MaxFiles { get; init; } = 1;

    private IJSObjectReference? _module;
    public List<IBrowserFile> UploadedFiles{ get; private set; } = [];
    
    private void UploadFile(InputFileChangeEventArgs e){
        if(UploadedFiles.Count < MaxFiles) UploadedFiles.AddRange(e.GetMultipleFiles());
    }
    
    public void RemoveFile(string name){
        UploadedFiles.RemoveAll(f => f.Name == name);
    }

    public void ClearFiles(){
        UploadedFiles.Clear();
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender){
            _module = await Js.InvokeAsync<IJSObjectReference>("import",
                "./Components/Upload/GenericFileInput.razor.js");

            await _module.InvokeVoidAsync("initComponent", InputName);
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync(){
        if (_module is not null){
            try{
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException){
            }
        }
    }
}