@using MoodleAssistant.Classes.Models
@using MoodleAssistant.Classes.Parse
@using MoodleAssistant.Classes.Utils
@using MoodleAssistant.Services
@using MoodleAssistant.Components.Upload
@inject ReplicatorState ReplicatorState
@inject IBrowserFileService FileService;

@{
    const string paramForm = "param-upload";
    var @params = ReplicatorState.FileParam?.GetFileParameters();
    var s = @params is{ Count: > 1 } ? "s" : "";
    var fileH3 = $"{@params!.Count} file parameter{s} found.";
}

<div class="flex flex-col p-6 border-t border-zinc-200">
    <h3 class="pb-4 text-gray-700 text-center">
        <span class="font-semibold">@fileH3</span> Please upload @ReplicatorState.FileParam!.NeededFiles files for every parameter:
    </h3>
    <form enctype="multipart/form-data" method="post" id="@paramForm" @onsubmit="Submit">
        <div class="flex flex-row w-max min-w-full justify-center space-x-4">
            @foreach (var param in @params){
                <div class="flex flex-col justify-center">
                    <span class="p-3 code text-center">@param.Match.Value</span>
                    <div class="p-3">
                        <DropFileInput @ref="_inputs[param.Name]" InputName="@($"{param.Name}-input")" MaxFiles="@ReplicatorState.FileParam!.NeededFiles"/>
                    </div>
                </div>
            }
        </div>
        <div class="flex flex-row mt-3 justify-center">
            <button type="submit" class="btn btn-primary py-1.5 px-6" @onclick="() => _isUploading = true">Upload</button>
            <button class="btn btn-secondary py-1.5 px-6 ml-3" id="clear-files">Clear</button>
        </div>
        <div class="flex flex-row md:w-fit md:mx-auto justify-center error-container">
            <Message @ref="_dialog" MsgText="@(ErrorMessage.GetErrorMessage(Error))" Type="MessageType.Error" CanClose="true"/>
            @if (_isUploading){
                <Message MsgText="Uploading..." Type="MessageType.Info" CanClose="false" />
            }
            @if (_successfulUpload){
                <Message MsgText="Files uploaded successfully." Type="MessageType.Success" CanClose="true" />
            }
        </div>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnSuccess { get; set; }
    
    public Error Error{ get; private set; } = Error.NoErrors; // public for testing purposes
    private Message _dialog = null!;
    private Dictionary<string, DropFileInput> _inputs = [];
    
    private bool _isUploading;
    private bool _successfulUpload;

    private async Task Submit(){
        Thread.Sleep(250);
        var state = ReplicatorState;
        if (state == null) return;
        
        var totalFiles = _inputs.Values.Sum(input => input.UploadedFiles.Count);
        if (totalFiles != state.FileParam?.GetFileParameters().Count * state.FileParam?.NeededFiles){
            SetError(Error.NoFiles);
            return;
        }
        
        var loader = new Loader(FileService);
        // load file parameters
        try{
            foreach (var param in state.FileParam?.GetFileParameters() ?? [])
                await loader.LoadFiles(_inputs[param.Name].UploadedFiles.Values.ToArray());
        }catch (ReplicatorException e){
            SetError(e.Error);
            return;
        }

        if (state.XmlModel?.XmlFile == null){
            SetError(Error.Unexpected);
            return;
        }
        var merger = new Merger(state, FileService, state.XmlModel.XmlFile){
            CsvAsList = state.CsvAsList
        };

        try{
            merger.MergeQuestion();
        }
        catch (ReplicatorException e){
            SetError(e.Error);
            return;
        }

        FileService.DeleteAllFiles();

        _isUploading = false;
        _successfulUpload = true;
        await OnSuccess.InvokeAsync();
    }
    
    private void SetError(Error err){
        _isUploading = false;
        FileService.DeleteAllFiles();
        Error = err;
        _dialog.Show();
        _dialog.Refresh();
    }
}