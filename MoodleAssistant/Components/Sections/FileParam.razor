@using MoodleAssistant.Services
@using MoodleAssistant.Components.Upload
@using MoodleAssistant.Logic
@using MoodleAssistant.Logic.Models
@using MoodleAssistant.Logic.Utils
@inject ReplicatorState ReplicatorState
@inject IBrowserFileService FileService;
@inject ILogger<FileParam> Logger;

@{
    const string paramForm = "param-upload";
    var @params = ReplicatorState.Parameters?.GetFileParameters();
    var s = @params is{ Count: > 1 } ? "s" : "";
    var fileH3 = $"{@params!.Count} file parameter{s} found.";
    
    // Get needed file names for each parameter
    Dictionary<string, string[]> neededFileNames = new();
    var headerRow = ReplicatorState.CsvAsList.ElementAt(0);
    foreach (var param in @params){
        var files = new string[ReplicatorState.Parameters!.NeededFiles];
        for (int i = 0; i < ReplicatorState.Parameters!.NeededFiles; i++){
            var index = Array.IndexOf(headerRow, param.Name);
            files[i] = ReplicatorState.CsvAsList.ElementAt(i + 1)[index];
        }
        neededFileNames.Add(param.Name, files);
    }
}

<div class="flex flex-col p-6 border-t border-zinc-200">
    <h3 class="pb-4 text-gray-700 text-center">
        <span class="font-semibold">@fileH3</span> Please upload @ReplicatorState.Parameters!.NeededFiles files for every parameter:
    </h3>
    <form enctype="multipart/form-data" method="post" id="@paramForm" @onsubmit="Submit" data-testid="file-form">
        <AntiforgeryToken />
        <div class="flex flex-row w-max min-w-full justify-center space-x-4">
            @foreach (var param in @params){
                <div class="flex flex-col justify-center">
                    <span class="p-3 code text-center">@param.Match.Value</span>
                    <p>
                        <span class="font-semibold">Needed names: </span>
                        @for(var i = 0; i < neededFileNames[param.Name].Length; i++){
                            var name = neededFileNames[param.Name][i];
                            if(i != neededFileNames[param.Name].Length - 1)
                                name = $"{name}, ";
                            <span>@name</span>
                        }
                    </p>
                    <div class="p-3">
                        <DropFileInput @ref="_inputs[param.Name]" InputName="@($"{param.Name}-input")" MaxFiles="@ReplicatorState.Parameters!.NeededFiles">
                            <p class="text-inherit">Drop files here, or <span class="text-blue-500 underline ml-[4px]">browse</span>.</p>
                        </DropFileInput>
                    </div>
                </div>
            }
        </div>
        <div class="flex flex-row mt-3 justify-center">
            <button type="submit" class="btn btn-primary py-1.5 px-6" @onclick="() => _isUploading = true" data-testid="snd-submit">Upload</button>
            <button type="button" class="btn btn-secondary py-1.5 px-6 ml-3" id="clear-files" @onclick="ClearForm">Clear</button>
        </div>
        <div class="flex flex-row md:w-fit md:mx-auto justify-center error-container">
            <Message @ref="_dialog" MsgText="@(ErrorMessage.GetErrorMessage(Error))" Type="MessageType.Error" CanClose="true"/>
            @if (_isUploading){
                <Message MsgText="Uploading..." Type="MessageType.Info" CanClose="false"/>
            }
            @if (_successfulUpload){
                <Message MsgText="Files uploaded successfully." Type="MessageType.Success" CanClose="true"/>
            }
        </div>
    </form>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnSuccess { get; set; }
    
    public Error Error{ get; private set; } = Error.NoErrors; // public for testing purposes
    private Message _dialog = null!;
    private Dictionary<string, DropFileInput> _inputs = [];
    
    private bool _isUploading;
    private bool _successfulUpload;
    
    public bool IsUploading => _isUploading; // testing
    public bool SuccessUpload => _successfulUpload; // testing

    private async Task Submit(){
        _successfulUpload = false;
        await OnSuccess.InvokeAsync(false);
        
        Thread.Sleep(250);
        var state = ReplicatorState;
        if (state == null){
            SetError(Error.Unexpected);
            return;
        }

        // Check if all needed files are uploaded
        var totalFiles = _inputs.Values.Sum(input => input.UploadedFiles.Count);
        if (totalFiles != state.Parameters?.GetFileParameters().Count * state.Parameters?.NeededFiles){
            SetError(Error.NoFiles);
            return;
        }
        
        // Load file parameters
        var loader = new Loader(FileService);
        try{
            foreach (var param in state.Parameters?.GetFileParameters() ?? [])
                await loader.LoadFiles(_inputs[param.Name].UploadedFiles.Values.ToArray());
        }catch (ReplicatorException e){
            SetError(e.Error);
            return;
        }catch (Exception e){
            Logger.LogError(e, e.Message);
            SetError(Error.Unexpected);
            return;
        }
        
        if (state.XmlModel?.XmlFile == null){
            SetError(Error.Unexpected);
            return;
        }
        var merger = new Merger(FileService){
            XmlFile = state.XmlModel.XmlFile,
            CsvAsList = state.CsvAsList
        };

        // Merge question
        try{
            state.Preview = new PreviewModel(merger.MergeQuestion(true), state.XmlModel.AnswerCount);
            state.Merged = merger.MergeQuestion();
        }
        catch (ReplicatorException e){
            SetError(e.Error);
            return;
        }
        catch (KeyNotFoundException){
            SetError(Error.FileMismatch);
            return;
        }catch (Exception e){
            Logger.LogError(e, e.Message);
            SetError(Error.Unexpected);
            return;
        }
        FileService.DeleteAllFiles();
        ClearForm();

        _isUploading = false;
        _successfulUpload = true;
        await OnSuccess.InvokeAsync(true);
    }

    private void ClearForm(){
        foreach (var input in _inputs.Values){
            input.ClearFiles();
        }
    }

    private void SetError(Error err){
        _isUploading = false;
        FileService.DeleteAllFiles();
        Error = err;
        _dialog.Show();
        _dialog.Refresh();
    }
}